// *
//  * Definition for a binary tree node.
//  * public class TreeNode {
//  *     public var val: Int
//  *     public var left: TreeNode?
//  *     public var right: TreeNode?
//  *     public init() { self.val = 0; self.left = nil; self.right = nil; }
//  *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
//  *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
//  *         self.val = val
//  *         self.left = left
//  *         self.right = right
//  *     }
//  * }

class Solution {
    func isSameTree(_ p: TreeNode?, _ q: TreeNode?) -> Bool {
        if p == nil && q == nil {
            return true
        }
        
        if p == nil && q != nil {
            return false
        }
        
         if p != nil && q == nil {
            return false
        }
        
        // 0
        var a = p!
        var b = q!
        var qa :[TreeNode] = [a] 
        var qb :[TreeNode] = [b] 
        // if a.val == nil && a.val == nil {
        //     return false
        // }
        // 1 
        while qa.count != 0 || qb.count != 0 {
            // 1-1 value check , pop
            var i = qa.first!
            var j = qb.first!
            
            if i.val != j.val {
                return false
            }
            
            qa.removeFirst()
            qb.removeFirst()
            // 1-2 left light node append
            if i.left != nil && j.left != nil {
                qa.append(i.left!)
                qb.append(j.left!)
            } 
            else if  i.left == nil && j.left == nil {
                
            } 
            else {
                //print(i.left,j.left)
                return false
            }
            if i.right != nil && j.right != nil {
                qa.append(i.right!)
                qb.append(j.right!)
            }
            else if i.right == nil && j.right == nil{
                
            }
             else {
                //print(i.right,j.right)
                return false
            }
         
            
        }
        
        
        return true
    }

}
