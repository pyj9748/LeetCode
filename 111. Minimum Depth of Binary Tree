/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init() { self.val = 0; self.left = nil; self.right = nil; }
 *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
 *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
 *         self.val = val
 *         self.left = left
 *         self.right = right
 *     }
 * }
 */
class Solution {
    func minDepth(_ root: TreeNode?) -> Int {
        if root == nil {
            return 0
        }
        var que = [[TreeNode?]]()
        que.append([root])
        var nodes = [TreeNode?]()
        var arr = [TreeNode?]()
        var depth = 0
        while !que.isEmpty {
            depth += 1
            nodes = que.removeFirst()
            arr = []
            for node in nodes {
                if node == nil {
                    continue
                }
                if node!.left == nil && node!.right == nil {
                    return depth
                } 
                arr.append(node!.left)
                arr.append(node!.right)
            }
            que.append(arr)
        }
        return depth
    }
}
