class Solution {
    func totalCost(_ costs: [Int], _ k: Int, _ candidates: Int) -> Int {
        let heap = Heap<(value: Int, index: Int)>([], comparator : {
            if $0.value < $1.value {
                return true
            } else if $0.value == $1.value {
                if $0.index < $1.index {
                    return true
                } else {
                    return false
                }
            } else {    
                return false
            }
        })
        var le = candidates - 1
        var ri = costs.count - candidates
        var cnt = 0 
        var ans = 0
        if le < ri {
            for i in 0...le {
                heap.push((costs[i],i))
            }
            for i in ri..<costs.count {
                heap.push((costs[i],i))
            }
        } else {
            for i in 0..<costs.count {
                heap.push((costs[i],i))
            }
        }
        while cnt < k {
            let popped = heap.pop()!
            ans += popped.value
            cnt += 1
            if popped.index <= le {
                if le + 1 < ri {
                    le += 1
                    heap.push((costs[le],le))
                }
            } else {
                if le < ri - 1 {
                    ri -= 1
                    heap.push((costs[ri],ri))
                }
            }            
        }
        return ans
    }
}

final class Heap<T> {
    typealias Comparator = (T, T) -> Bool
    var arr: [T]
    var comparator: Comparator

    init(_ arr: [T], comparator: @escaping Comparator) {
        self.arr = arr
        self.comparator = comparator
    }

    func makeHeap() {
        for i in stride(from: arr.count - 1, through: 0, by: -1) {
            heapifyDown(idx: i)
        }
    }
    func heapifyDown(idx: Int) {
        var i = idx
        while i * 2 + 1 < arr.count { //
            if i * 2 + 2 < arr.count {
                let lidx = i * 2 + 1
                let ridx = i * 2 + 2
                var cidx = lidx
                if comparator(arr[lidx], arr[ridx]) {
                    cidx = lidx
                } else {
                    cidx = ridx
                }
                if !comparator(arr[i], arr[cidx]) {
                    let temp = arr[cidx]
                    arr[cidx] = arr[i]
                    arr[i] = temp
                    i = cidx
                } else {
                    break
                }
            } else {
                let lidx = i * 2 + 1
                if !comparator(arr[i], arr[lidx]) {
                    let temp = arr[lidx]
                    arr[lidx] = arr[i]
                    arr[i] = temp
                    i = lidx
                } else {
                    break
                }
            }

        }
    }
    func heapifyUp() {
        var i = arr.count - 1
        var p = 0
        while i > 0 {
            p = (i - 1) / 2
            if comparator(arr[i], arr[p]) {
                    let temp = arr[p]
                    arr[p] = arr[i]
                    arr[i] = temp
                    i = p
            } else {
                break
            }
        }
    }
    func push(_ value: T) {
        arr.append(value)
        heapifyUp()
    }
    func pop() -> T? {
        if arr.isEmpty { return nil }
        let ret = arr[0]
        arr[0] = arr[arr.count - 1]
        arr.removeLast()
        heapifyDown(idx: 0)
        return ret
    }

}
