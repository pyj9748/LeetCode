class Solution {
    func findRelativeRanks(_ score: [Int]) -> [String] {
        var ans = Array(repeating: "", count: score.count)
        var heap = Heap<(val: Int, idx: Int)>([], comparator: {
            $0.val > $1.val
        })
        for i in 0..<score.count {
            heap.push((val: score[i], idx: i))
        }
        var cnt = 0
        while heap.arr.count > 0 {
            let top = heap.pop()!
            cnt += 1
            if cnt == 1 {
                ans[top.idx] = "Gold Medal"
            } else if cnt == 2 {
                ans[top.idx] = "Silver Medal"
            } else if cnt == 3 {
                ans[top.idx] = "Bronze Medal"
            } else {
                ans[top.idx] = String(cnt)
            }
        }
        return ans
    }
}
class Heap<T> {
    typealias Comparator = (T, T) -> Bool
    var arr: [T]
    var comparator: Comparator

    init(_ arr: [T], comparator: @escaping Comparator) {
        self.arr = arr
        self.comparator = comparator
        heapify()
    }
    func heapify() {
        for i in stride(from: arr.count - 1, through: 0, by: -1) {
            heapifyDown(idx: i)
        }
    }

    func heapifyDown(idx: Int) {
        var i = idx
        // 자식 없는 경우
        while i < arr.count {
            if (2 * i) + 1 >= arr.count {
            break
            } else {
                // 둘다 있는 경우
                if (2 * i) + 2 < arr.count {
                    let l = (2 * i) + 1
                    let r = l + 1
                    var c = l
                    if !comparator(arr[l], arr[r]) {
                        c = r
                    } 
                    if !comparator(arr[i], arr[c]) {
                        let temp = arr[i]
                        arr[i] = arr[c]
                        arr[c] = temp
                        i = c
                    } else { break }
                }
                // 왼자식만 있는 경우
                else if (2 * i) + 1 < arr.count {
                    let l = (2 * i) + 1
                    if !comparator(arr[i], arr[l]) {
                        let temp = arr[i]
                        arr[i] = arr[l]
                        arr[l] = temp
                        i = l
                    } else { break }
                }
            }
        }
        
    }
    func pop() -> T? {
        if arr.count == 0 { return nil }
        let ret = arr[0]
        arr[0] = arr[arr.count - 1]
        arr.removeLast()
        heapifyDown(idx: 0)
        return ret
    }
    func push(_ val: T) {
        arr.append(val)
        heapifyUp()
    }
    func heapifyUp() {
        var i = arr.count - 1
        while i > 0 {
            let p = (i - 1) / 2
            if !comparator(arr[p], arr[i]) {
                    let temp = arr[i]
                    arr[i] = arr[p]
                    arr[p] = temp
                    i = p
            } else { break }
        }
    }
}
