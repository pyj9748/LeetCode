/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public var val: Int
 *     public var left: TreeNode?
 *     public var right: TreeNode?
 *     public init() { self.val = 0; self.left = nil; self.right = nil; }
 *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }
 *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {
 *         self.val = val
 *         self.left = left
 *         self.right = right
 *     }
 * }
 */
class Solution {
    func getMinimumDifference(_ root: TreeNode?) -> Int {
        var arr = [Int]()

        if root == nil { return 0 }
        var que = [TreeNode?]()
        que.append(root)

        while !que.isEmpty {
            guard let node = que.removeLast() else { continue }
            
            
            arr.append(node.val)
            if node.left != nil { que.append(node.left)}
            if node.right != nil { que.append(node.right)}
        }

        arr.sort()
        var ans = Int.max
        for i in 1..<arr.count {
            ans = min(ans, abs(arr[i] - arr[i-1]))
        }
        return ans
    }
}
