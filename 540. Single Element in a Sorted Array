class Solution {
    func singleNonDuplicate(_ nums: [Int]) -> Int {
        var st = 0
        var end = nums.count - 1
        if end == 0 {
            return nums[0]
        }
        var mid = (st + end) / 2

        while st <= end {
            mid = (st + end) / 2
            var subIdx = -1
            if (mid - 1) >= 0 && nums[mid] == nums[mid - 1 ] {
                subIdx = mid - 1 
            }
            if (mid + 1) <= nums.count - 1 && nums[mid] == nums[mid + 1 ] {
                subIdx = mid + 1 
            }
            if subIdx == -1 {
                return nums[mid]
            }
            if subIdx == mid - 1 {
                let le = (subIdx - st)
                let ri = (end - mid)
                if le % 2 == 1 {
                    end = subIdx - 1
                } else {
                    st = mid + 1
                }
            }
            if subIdx == mid + 1 {
                let le = (mid - st)
                let ri = (end - subIdx)
                if le % 2 == 1 {
                    end = mid - 1
                } else {
                    st = subIdx + 1
                }
            }

        }
        return 0

    }
}
