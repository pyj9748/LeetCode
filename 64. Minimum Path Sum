class Solution {
    func minPathSum(_ grid: [[Int]]) -> Int {
        let row = grid.count
        let col = grid[0].count
        var dp = Array(repeating: Array(repeating: 0, count: col), count: row)
        dp[0][0] = grid[0][0]
        if row == 1 && col != 1 {
            return grid[0].reduce(0, +)
        }
        if col == 1 && row != 1 {
            var ans = 0
            for i in 0..<grid.count {
                ans += grid[i][0]
            }
            return ans
        }
        // 1
        for i in 1..<row {
            var n = i
            var m = 0
            while n >= 0 && m < col {
                if m == 0 {
                    dp[n][m] = dp[n-1][m] + grid[n][m]
                } else if n == 0 {
                    dp[n][m] = dp[n][m-1] + grid[n][m]
                } else {
                    dp[n][m] = min(dp[n-1][m], dp[n][m-1]) + grid[n][m]
                }
                n -= 1
                m += 1
            }
        }
        // 2
        for j in 1..<col {
            var n = row - 1
            var m = j
            while m < col && n >= 0 {
                if m == 0 && n != 0 {
                    dp[n][m] = dp[n-1][m] + grid[n][m]
                } else if n == 0 && m != 0 {
                    dp[n][m] = dp[n][m-1] + grid[n][m]
                } else {
                    dp[n][m] = min(dp[n-1][m], dp[n][m-1]) + grid[n][m]
                }
                n -= 1
                m += 1
            }
        }
        return dp[row-1][col-1]
    }
}
