class Solution {
    func minEatingSpeed(_ piles: [Int], _ h: Int) -> Int {
        var le = 1
        var ri = piles.max()!
        var mid = (le + ri) / 2
        if piles.count == 1 && ri < h {
            return 1
        }
        func eat(_ n: Int) -> Int {
            var temp = 0
            for pile in piles {
                temp += pile / n
                if pile % n > 0 {
                    temp += 1
                }
            }
            return temp
        }
        var ans = 0
        while le <= ri {
            
            mid = (le + ri) / 2
            let a = eat(mid)
            if a > h {
                le = mid + 1
            } else if a < h {
                ri = mid - 1
            } else {
                break
            }
        }
        ans = mid
        let a = eat(ans)
        if a > h {
            while eat(ans) > h {
                ans += 1
            }
            return ans
        } else if a < h {
            while eat(ans) < h {
                ans -= 1
            }
            return ans + 1
        } else {
            if eat(ans - 1) != h {
                return ans
            } else {
                while eat(ans) == h {
                    ans -= 1
                }
                return ans + 1
            }
        }
        return ans
    }
}
